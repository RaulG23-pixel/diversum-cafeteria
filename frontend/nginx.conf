# Este es el archivo de configuración principal de Nginx.
# Es buena práctica mantenerlo limpio y usar include para configuraciones de sitios específicos.

# Configuración global de Nginx
user  nginx; # Usuario bajo el cual Nginx ejecutará sus procesos de worker
worker_processes  auto; # Número de procesos de worker. 'auto' usa el número de CPUs disponibles.

error_log  /var/log/nginx/error.log warn; # Ruta para el log de errores.
pid        /var/run/nginx.pid; # Ruta para el archivo PID.

events {
    worker_connections  1024; # Número máximo de conexiones simultáneas por proceso de worker.
    # multi_accept on; # Aceptar múltiples conexiones en un solo evento.
}

http {
    include       /etc/nginx/mime.types; # Incluye tipos MIME (necesario para servir archivos estáticos correctamente)
    default_type  application/octet-stream; # Tipo MIME por defecto.

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main; # Ruta para el log de acceso.

    sendfile        on; # Optimización para servir archivos.
    #tcp_nopush     on; # Habilita/deshabilita la opción TCP_NOPUSH.

    keepalive_timeout  65; # Tiempo en segundos para mantener las conexiones keep-alive.

    gzip  on; # Habilitar compresión GZIP para mejorar el rendimiento.
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Include de archivos de configuración de sitios específicos.
    # Aquí es donde definiremos nuestros bloques 'server'.
    include /etc/nginx/conf.d/*.conf; # Nginx cargará todos los archivos .conf de esta carpeta.
}

# Puedes definir tu bloque 'server' directamente aquí o en un archivo separado
# dentro de /etc/nginx/conf.d/ (por ejemplo, default.conf o mi-app.conf)
# y luego incluirlo como se muestra arriba.
# Para este template, lo incluimos directamente como ejemplo.

# --------------------------------------------------------------------------------
# Bloque de Servidor para tu Aplicación (Frontend React + Backend Flask)
# Este bloque es el más importante para tu configuración específica.
# --------------------------------------------------------------------------------
server {
    listen 80; # Nginx escuchará en el puerto 80 para tráfico HTTP.
    server_name localhost tu_dominio.com www.tu_dominio.com; # Reemplaza con tu dominio o IP del servidor.
                                                          # 'localhost' es útil para pruebas locales.

    # ----------------------------------------------------------------------------
    # Configuración para servir el Frontend React (archivos estáticos)
    # ----------------------------------------------------------------------------
    location / {
        root /usr/share/nginx/html; # Directorio donde Nginx encontrará los archivos de construcción de React.
                                    # Este es el destino del volumen en docker-compose.yml:
                                    # - ./frontend/build:/usr/share/nginx/html:ro

        # Permite que las rutas de React Router (history mode) funcionen correctamente.
        # Si una URL no coincide con un archivo estático, Nginx redirige a index.html.
        try_files $uri $uri/ /index.html;

        # Evitar caché para el index.html durante el desarrollo/despliegue
        # Si necesitas un control de caché más estricto, ajusta esto.
        # expires 1d; # Ejemplo: Cachear archivos estáticos por 1 día en el navegador del cliente.
    }

    # ----------------------------------------------------------------------------
    # Configuración para proxy inverso al Backend Flask (API)
    # ----------------------------------------------------------------------------
    # Todas las solicitudes que empiezan con /api/ serán reenviadas al servicio backend.
    location /api/ {
        # 'backend' es el nombre del servicio Flask en tu docker-compose.yml.
        # '8000' es el puerto que tu aplicación Flask está exponiendo internamente.
        proxy_pass http://backend:8000;

        # Cabeceras importantes para el proxy inverso
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme; # Indica si la conexión original fue HTTP o HTTPS.

        # Opcional: Manejo de errores si el backend no responde
        # proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        # proxy_connect_timeout 300s;
        # proxy_send_timeout 300s;
        # proxy_read_timeout 300s;
    }

    # ----------------------------------------------------------------------------
    # Opcional: Configuración para HTTPS (Puerto 443)
    #
    # Para usar HTTPS, necesitarás certificados SSL (por ejemplo, de Let's Encrypt).
    # Este bloque solo se activa si tienes un certificado.
    # ----------------------------------------------------------------------------
    # listen 443 ssl;
    # ssl_certificate /etc/letsencrypt/live/tu_dominio.com/fullchain.pem; # Ruta a tu certificado completo
    # ssl_certificate_key /etc/letsencrypt/live/tu_dominio.com/privkey.pem; # Ruta a tu clave privada
    # include /etc/letsencrypt/options-ssl-nginx.conf; # Configuración de seguridad SSL (de Certbot, si lo usas)
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # Parámetros DH (de Certbot)

    # Opcional: Redirigir HTTP a HTTPS
    # server {
    #     listen 80;
    #     server_name tu_dominio.com www.tu_dominio.com;
    #     return 301 https://$host$request_uri;
    # }
}